download_url: https://github.com/Yuqi-Du/storageYuqiDu/raw/main/secure-connect-dev-test01.zip
provider: ec2
zone: us-west-2
instance: m5.24xlarge
token: dev_token
workload_duration: 50m
keyspace: testks
workload_file: https://github.com/Yuqi-Du/storageYuqiDu/raw/main/soak-test-nosqlbench.yaml
sort_groups: 25
#dataset: https://github.com/Yuqi-Du/storageYuqiDu/raw/main/vector-dataset.txt
client_count: 1
docs_count: 10000
single_op_cycles: 100
single_op_rate: 20
single_op_connections: 3


ops:
  - op: find-one-id
  - op: find-by-in
  - op: find-one-by-vector
  - op: find-one-by-city
  - op: find-multi-by-married-name-exists
  - op: find-multi-by-married-name-exists-with-projection
  - op: find-multi-find-by-group-sort-by-name
  - op: find-one-by-name-newest-and-update-city
#  - op: delete-one-id
#  - op: write-insert-one-vector
  - op: find-one-id-and-replace-upsert
  - op: update-many-by-country
  - op: count-by-group

# DEFAULT PARAMETERS:
# # region setup
# token: dev_token
# download_url: https://set-me
#
# # client setup
# client_count: 1
# client_provider: ec2
# client_region: us-west-2
# client_type: m5.24xlarge
# client_nb_version: nosqlbench-4.17.26,untagged-f21b2fb973b28aef97cd
#
# workload_file: set-me
#
# # keyspace setup
# keyspace: set-me
#
# # 10000 documents and 25 groups, so that sort and count target ~400 docs
# # adapt if needed, but keep in mind that sort supports max 10K docs per operation
# docs_count: 10000
# sort_groups: 25
#
# # load setup:
# # - each operation cycle: single-op-cycles 10000
# # - each operation rate: limited to 25ops/s. notice that this rate may not be reached (upper bound)
# # - totals rate: 11*25=275ops/s
# # - each operation will be executed by 3 clients, totals to 3*11=33 clients
#
# in order to have a stable base of rows in the table, no delete in this soak test
#
# ops:
#   - op: find-one-id
#   - op: find-by-in
#   - op: find-one-by-vector
#   - op: find-one-by-city
#   - op: find-multi-by-married-name-exists
#   - op: find-multi-by-married-name-exists-with-projection
#   - op: find-multi-find-by-group-sort-by-name
#   - op: find-one-by-name-newest-and-update-city
#   - op: find-one-id-and-replace-upsert
#   - op: update-many-by-country
#   - op: count-by-group

---

ensemble:
  server:
    node.count: 1
    provisioner:
      name: existing_astra
      properties:
        bundle_download_url: {{download_url}}
        keyspace: {{keyspace}}
        username: token
        password: <<secret:{{token}}>>
        token: <<secret:{{token}}>>

  client:
    node.count: {{client_count}}
    provisioner:
      name: ctool
      properties:
        cloud.provider: {{provider}}
        cloud.region: {{zone}}
        cloud.instance.type: {{instance}}
    configuration_manager:
      - name: nosqlbench_ssh
        properties:
          version: 5.17.4-preview

workload:
  phases:
    # set schema phase, ensures collection table is created from scratch (delete,create)
    - schema-collection:
        module: nosqlbench
        properties:
          client.size: 1
          alias: schema-collection
          service_type: stargate
          args:
            - driver=http
            - yaml={{workload_file}}
            - tags=block:schema-collection
            - namespace={{keyspace}}
            - protocol=https
            - jsonapi_port=443
            - path_prefix=/api/json
            - threads=1
            - errors=stop

    # prepare phase that inserts desired amount of documents
    # executed only on a single client, stopped on errors
    - write:
        module: nosqlbench
        properties:
          alias: write
          service_type: stargate
          cycles: {{docs_count}}
          args:
            - driver=http
            - workload={{workload_file}}
            - tags=block:write
            - namespace={{keyspace}}
            - protocol=https
            - jsonapi_port=443
            - path_prefix=/api/json
            - docscount={{docs_count}}
            - threads=30
            - connections=30
            - errors=retry,warn

    -
      {{#ops}}
      main_{{op}}:
        module: nosqlbench
        properties:
          alias: main_{{op}}
          service_type: stargate
          cycles: {{single_op_cycles}}
          args:
            - driver=http
            - workload={{workload_file}}
            - tags=block:main,name:.*{{op}}
            - errors=histogram,warn
            - namespace={{keyspace}}
            - protocol=https
            - jsonapi_port=443
            - path_prefix=/api/json
            - connections={{single_op_connections}}
            - threads=1x
            - rate={{single_op_rate}}
            - docscount={{docs_count}}
        {{/ops}}




  checkers:
    verify_success:
      checker: nofail
  artifact_checkers:
    generate_chart:
      artifact_checker: hdrtool